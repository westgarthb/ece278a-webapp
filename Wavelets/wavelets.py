# Author: Jackie

# Dependencies
from matplotlib.transforms import Transform
import numpy as np
import matplotlib.pyplot as plt
import streamlit as st
import cv2
import pywt

############################

# TODO: Applition Tool
def introduction():
    # INTRO
    st.header('Wavelets')
    st.write('Wavelets are filters that localize signals both in frequency and time. Wavelet analysis can serve as an alternative to \
        Fourier analysis with the added benefits of being more resistant to noise and the ability to preserve spatial information. \
        Wavelets are defined as a function that satisfies the following properties:')

    # Wavelet Property 1
    st.latex(r'''\int_{-\infty}^{\infty}\Psi(x)dx = 0''')

    # Wavelet Property 2
    st.latex(r'''\int_{-\infty}^{\infty}\frac{|\hat{\Psi(\omega)}|^2}{\omega}d\omega = C_\Psi < \infty''')

    # WAVELET FAMILES
    st.subheader("Wavelet Families")
    st.write('A wavelet family is a collection of functions generated by changing frequency  parameter \"a\" and shift parameter \"b\" explicitly in the form:')
    
    # Wavelet Familes Formula
    st.latex(r'''\Psi_{a,b}(x) = \frac{1}{\sqrt{a}}\Psi^*\frac{(x-b)}{a}dt''')

    # Wavelet Familes Example
    st.subheader("Example")

    # Changing A (frequency parameter)
    fig_a_index = st.slider("Change \"a\" parameter (Scale)", 0, 9, 5)
    wav_a_fig = cv2.imread('./images/figures/wavelet_images/wavelets/a/a_{}.png'.format(int(fig_a_index)))
    wav_a_fig = cv2.cvtColor(wav_a_fig, cv2.COLOR_BGR2RGB) / 255.0
    st.image(wav_a_fig)

    # Changing B (shift parameter)
    fig_b_index = st.slider("Change \"b\" parameter (Location)", 0, 9, 5)
    wav_b_fig = cv2.imread('./images/figures/wavelet_images/wavelets/b/b_{}.png'.format(int(fig_b_index)))
    wav_b_fig = cv2.cvtColor(wav_b_fig, cv2.COLOR_BGR2RGB) / 255.0
    st.image(wav_b_fig)


def body():
    st.subheader("Well Known Wavelets")
    wavelet_types = cv2.imread('./images/figures/wavelet_images/wavelet_figures.PNG')
    wavelet_types = cv2.cvtColor(wavelet_types, cv2.COLOR_BGR2RGB) / 255.0
    st.image(wavelet_types)
    st.write("Referenced from Shawhin Talebi [Towards Data Science]")

    st.title("Wavelet Transforms")
    """### gif from url"""
    st.markdown("![Animation of Discrete Wavelet Transform](https://miro.medium.com/max/900/1*4fXf0Yy8TMLSk7LXoZDDWw.gif)")


    st.subheader("Continuous Wavelet Transform (CWT)")
    st.write('The Continuous Wavelet Transform uses every possible wavelet over a range of scales and locations i.e. an infinite number of scales and locations.')

    st.latex(r'''Wf(a, b) = \int_{-\infty}^{+\infty} f(x) \Psi_{a, b}(x)dx''')
    st.write('The inverse transform is given by:')
    st.latex(r'''f(x) = \frac{1}{C_\Psi}\int_{-\infty}^{+\infty}\int_{-\infty}^{+\infty}\frac{1}{|a|^{1/2}}Wf(a, b)\Psi_{a, b}(x) da db''')
    st.write('Where C_Psi is the constant coming from the definition of a wavelet.')

    st.subheader("Discrete Wavelet Transform (DWT)")
    st.write('The Discrete Wavelet Tranform is similar to the continuous version with main difference being that specific discrete values\
        of a and b are chosen to form an orthogonal basis. Given a certain type of wavelet, an orthogonal family can be constructed by choosing:' )
    st.write('a = 2^m and b = n2^m where n and m are integers. With these choices the DWT is given by:')
    st.latex(r'''Wf(m, n) = <\Psi_{m, n}, f> = \sum_{k=0}^{p-1} \Psi_{m, n}(t_k)f(t_k)''')
    st.write('The inverse transform is given by:')
    st.latex(r'''f(x) = \sum_{m, n}\Psi_{m,n}(x) Wf(m, n)''')
    st.subheader('Example:')

    titles = ['Image', ' Horizontal detail',
          'Vertical detail', 'Diagonal detail']

    select_image = st.selectbox("Image", ('tiger', 'mountains', 'woman'))
    select_wav = st.selectbox("Select Wavelet", ('bior1.3', 'bior3.1', 'haar', 'sym8', 'db16', 'coif1'))
    wav_img = cv2.imread('./images/{}.png'.format(select_image))
    wav_img = cv2.cvtColor(wav_img, cv2.COLOR_BGR2GRAY) / 255.0

    coeffs2 = pywt.dwt2(wav_img, select_wav)
    LL, (LH, HL, HH) = coeffs2
    fig = plt.figure(figsize=(8, 8))
    for i, a in enumerate([LL, LH, HL, HH]):
        ax = fig.add_subplot(2, 2, i + 1)
        ax.imshow(a, interpolation="nearest", cmap=plt.cm.gray)
        ax.set_title(titles[i], fontsize=10)
        ax.set_xticks([])
        ax.set_yticks([])

    fig.tight_layout()
    fig.canvas.draw()
    data = np.frombuffer(fig.canvas.tostring_rgb(), dtype=np.uint8)
    data = data.reshape(fig.canvas.get_width_height()[::-1] + (3,))
    st.image(np.clip(data / np.max(data), 0, 1))

def applications():
    st.subheader("Wavelets Applications")
    st.write('1. Analyzing Electrocardiogram (ECG) signals')
    st.write('2. Analyzing topological data')
    st.write('3. Analyzing audio signals')


def display_wavelets():
    # Wavelets + Definitions + Formulas
    introduction()

    body()

    applications()